
R version 4.4.0 (2024-04-24 ucrt) -- "Puppy Cup"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "MSCRUtils"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> library('MSCRUtils')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("MSCRUtils")
> ### * MSCRUtils
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: MSCRUtils
> ### Title: MSCRUtils: Utility Functions for R Development and Data Export
> ### Aliases: MSCRUtils-package MSCRUtils
> 
> ### ** Examples
> 
> # Package management
> install_if_missing(c("dplyr", "ggplot2"))
All packages are already installed.
> load_packages(c("dplyr", "ggplot2"))
  dplyr ggplot2 
   TRUE    TRUE 
> check_package_versions(c("dplyr", "ggplot2"))
  Package Installed_Version Required_Version    Status
1   dplyr             1.1.4             <NA> Installed
2 ggplot2             3.5.2             <NA> Installed
> 
> # Project management
> create_r_project("my_analysis_project")
R project ' my_analysis_project ' created successfully at:
 E:/Coding/MSCRUtils_dev/MSCRUtils/..Rcheck/my_analysis_project 
Standard directory structure has been created.
Environment setup script 'setup_environment.R' has been created.
> 
> # File management
> ensure_directory("output/figures")
Directory created: output/figures 
> 
> # Data export
> export_to_excel(mtcars, "cars.xlsx", 
+                header_style = "colored", 
+                table_style = "striped")
Excel file saved to: cars.xlsx 
> 
> 
> 
> 
> 
> cleanEx()

detaching 'package:ggplot2', 'package:dplyr'

> nameEx("check_package_versions")
> ### * check_package_versions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: check_package_versions
> ### Title: Check package versions
> ### Aliases: check_package_versions
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Check versions
> ##D versions <- check_package_versions(c("dplyr", "ggplot2"))
> ##D print(versions)
> ##D 
> ##D # Check against required versions
> ##D required <- c("dplyr" = "1.0.0", "ggplot2" = "3.3.0")
> ##D versions <- check_package_versions(c("dplyr", "ggplot2"), required)
> ##D print(versions)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("create_r_project")
> ### * create_r_project
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: create_r_project
> ### Title: Create a new R project with standard structure
> ### Aliases: create_r_project
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Create project in current directory
> ##D create_r_project("my_analysis_project")
> ##D 
> ##D # Create project in specific path
> ##D create_r_project("my_analysis_project", path = "~/projects")
> ##D 
> ##D # Create without environment setup
> ##D create_r_project("my_analysis_project", setup_env = FALSE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("ensure_directory")
> ### * ensure_directory
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ensure_directory
> ### Title: Ensure directory exists, create if it doesn't
> ### Aliases: ensure_directory
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Create single directory
> ##D ensure_directory("output")
> ##D 
> ##D # Create nested directories
> ##D ensure_directory("output/figures/2023")
> ##D 
> ##D # Create with warnings
> ##D ensure_directory("output", showWarnings = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("export_to_excel")
> ### * export_to_excel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: export_to_excel
> ### Title: Export data to Excel file with formatting options
> ### Aliases: export_to_excel
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Basic usage
> ##D export_to_excel(mtcars, "cars.xlsx")
> ##D 
> ##D # With custom styling
> ##D export_to_excel(mtcars, "cars_styled.xlsx", 
> ##D                header_style = "colored", 
> ##D                table_style = "striped")
> ##D 
> ##D # With summary sheet
> ##D export_to_excel(mtcars, "cars_with_summary.xlsx",
> ##D                add_summary = TRUE)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("generate_dev_standards")
> ### * generate_dev_standards
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: generate_dev_standards
> ### Title: Generate R Package Development Standards Documentation
> ### Aliases: generate_dev_standards
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Generate standards documentation in default location
> ##D generate_dev_standards()
> ##D 
> ##D # Generate with custom package name
> ##D generate_dev_standards(package_name = "MyPackage")
> ##D 
> ##D # Generate in custom directory
> ##D generate_dev_standards("./docs/standards")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("install_if_missing")
> ### * install_if_missing
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: install_if_missing
> ### Title: Install packages if they are missing
> ### Aliases: install_if_missing
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Install packages if missing
> ##D install_if_missing(c("dplyr", "ggplot2"))
> ##D 
> ##D # Install with custom repository
> ##D install_if_missing("devtools", repos = "https://cran.rstudio.com/")
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("load_packages")
> ### * load_packages
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: load_packages
> ### Title: Load packages with error handling
> ### Aliases: load_packages
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Load packages quietly
> ##D status <- load_packages(c("dplyr", "ggplot2"), quiet = TRUE)
> ##D print(status)
> ##D 
> ##D # Load with verbose output
> ##D load_packages(c("dplyr", "ggplot2"), quiet = FALSE)
> ## End(Not run)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.99 0.19 1.36 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
